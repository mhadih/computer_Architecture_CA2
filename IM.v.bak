`timescale 1ns/1ns
module IM( input [9:0] pc,output [15:0] insOut);
  reg [15:0] im [0:1023];
  initial begin
  assign instruction = instructions[address[10:1]];
  assign instructions[0] = 16'b1000000010000000;//win0
  assign instructions[1] = 16'b1000010100000100;//sub R1 R1
  assign instructions[2] = 16'b0000100011111010;//load to R2
  assign instructions[3] = 16'b1000011000000010;//add R1 to R2
  assign instructions[4] = 16'b0000100011111011;//load to R2
  assign instructions[5] = 16'b1000011000000010;//add R1 to R2
  assign instructions[6] = 16'b0000100011111100;//load to R2
  assign instructions[7] = 16'b1000011000000010;//add R1 to R2
  assign instructions[8] = 16'b0000100011111101;//load to R2
  assign instructions[9] = 16'b1000011000000010;//add R1 to R2
  assign instructions[10] = 16'b0000100011111110;//load to R2
  assign instructions[11] = 16'b1000011000000010;//add R1 to R2
  assign instructions[12] = 16'b0000100011111111;//load to R2
  assign instructions[13] = 16'b1000011000000010;//add R1 to R2
  assign instructions[14] = 16'b0000100100000000;//load to R2
  assign instructions[15] = 16'b1000011000000010;//add R1 to R2
  assign instructions[16] = 16'b0000100100000001;//load to R2
  assign instructions[17] = 16'b1000011000000010;//add R1 to R2
  assign instructions[18] = 16'b0000100100000010;//load to R2
  assign instructions[19] = 16'b1000011000000010;//add R1 to R2
  assign instructions[20] = 16'b0000100100000011;//load to R2
  assign instructions[21] = 16'b1000011000000010;//add R1 to R2
  end
  assign insOut = im[pc];
endmodule 
